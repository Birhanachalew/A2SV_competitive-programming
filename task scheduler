#####################################################################################################################
# Problem: Task Scheduler
# Solution : Max Heap
# Time Complexity : O(n)
# Space Complexity : O(1)
#####################################################################################################################

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        count = Counter(tasks)
        max_heap = [-cnt for cnt in count.values()]
        heapq.heapify(max_heap)

        time = 0
        queue = collections.deque()

        while max_heap or queue:
            time += 1
            if not max_heap:
                time = queue[0][1]
            else:
                cnt = 1 + heapq.heappop(max_heap)
                if cnt:
                    queue.append([cnt, time + n])
            if queue and queue[0][1] == time:
                heapq.heappush(max_heap, queue.popleft()[0])

        return time
